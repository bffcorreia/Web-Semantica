package com.ontology;

/* CVS $Id: $ */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintStream;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.List;

import android.os.Environment;

import com.hp.hpl.jena.ontology.*;

import com.hp.hpl.jena.query.Dataset;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.tdb.TDBFactory;
import com.hp.hpl.jena.util.FileManager;

import com.workspace.Data.Chamada;
import com.workspace.Data.Contato;
import com.workspace.Data.GlobalVariables;
import com.workspace.Data.Mensagem;
import com.workspace.sparql.Queries;
 
/**
 * Vocabulary definitions from file:/Applications/Protege_3.4.8/schemagen-temp.owl 
 * @author Auto-generated by schemagen on 02 Dec 2012 16:00 
 */
public class Onty {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    public static Model model;
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.owl-ontologies.com/Ontology1353891856.owl#";
    public static final String URI = "http://www.owl-ontologies.com/Ontology1353891856.owl";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    public static ObjectProperty contact;
    
    public static ObjectProperty thread;
    
    public static DatatypeProperty appName;
    
    public static DatatypeProperty appType;
    
    public static DatatypeProperty callNumber;
    
    public static DatatypeProperty callType;
    
    public static DatatypeProperty date;
    
    public static DatatypeProperty email;
    
    public static DatatypeProperty endDate;
    
    public static DatatypeProperty id;
    
    public static DatatypeProperty name;
    
    public static DatatypeProperty number;
    
    public static DatatypeProperty packageName;
    
    public static DatatypeProperty text;
    
    public static DatatypeProperty title;
    
    public static DatatypeProperty versionCode;
    
    public static DatatypeProperty versionName;
    
    public static OntClass App;
    
    public static OntClass Call;
    
    public static OntClass Contact;
    
    public static OntClass Event;
    
    public static OntClass Mail;
    
    public static OntClass Sms;
    
    public static OntClass Thread;
    
    public Onty()
    {
    	/*Model tdb = TDBFactory.createModel(Environment.getExternalStorageDirectory()+"/tdb");
    	
    	OntModel m_model = getOntology(tdb);
    	
    	m_model = createIndividuals(m_model);
    	
    	m_model.close();*/
    	
    	loadOntologyPopulationFromTDB();
    }
    
    public static OntModel createIndividuals(OntModel m_model)
    {
    	int i, j, k;
    	
    	Format formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    	
    	Individual indApp;
    	
    	com.workspace.Data.Application app;
    	
    	for(i = 0; i<GlobalVariables.listaApplications.size(); i++)
    	{
    		app = GlobalVariables.listaApplications.get(i);
    		
    		indApp = m_model.createIndividual(NS+app, App);
    		
    		indApp.addProperty(appName, app.getAppname());
    		indApp.addProperty(packageName, app.getPname());
    		indApp.addProperty(versionCode, Integer.toString(app.getVersionCode()));
    		indApp.addProperty(versionName, app.getVersionName());
    	}
    	
    	Individual indEvt;
    	
    	com.workspace.Data.Event evt;
    	
    	for(i = 0; i<GlobalVariables.listaEventos.size(); i++)
    	{
    		evt = GlobalVariables.listaEventos.get(i);
    		
    		indEvt = m_model.createIndividual(NS+evt, Event);
    		
    		indEvt.addProperty(title, evt.getName());
    		indEvt.addProperty(date, formatter.format(evt.getStartDate()));
    		
    		if(evt.getEndDate() != null)
    			indEvt.addProperty(endDate, formatter.format(evt.getEndDate()));
    	}
    	
    	Individual indC, indCall, indSMS, indThread;
    	
    	Contato c;
    	Chamada call;
    	Mensagem msg;
    	
    	List<Chamada> callList;
    	List<Mensagem> smsList;
    	
    	for(i = 0; i<GlobalVariables.listaContatos.size(); i++)
    	{
    		c = GlobalVariables.listaContatos.get(i);
    		
    		indC = m_model.createIndividual(NS+c, Contact);
    		
    		indC.addProperty(id, c.getID());
    		indC.addProperty(name, c.getNome());
    		if(c.getEmail()!= null)
    			indC.addProperty(email, c.getEmail());

    		for(j = 0; j<c.getTelefones().size(); j++)
    			indC.addProperty(number, c.getTelefones().get(j).getTelefone());
    		
    		callList = GlobalVariables.findCallsByContact(c);
    		
    		for(k = 0; k<callList.size(); k++)
    		{
    			call = callList.get(k);
    			indCall = m_model.createIndividual(NS+call, Call);
        		
    			indCall.addProperty(callNumber, call.getTelefone());
    			indCall.addProperty(callType, Integer.toString(call.getType()));
    			indCall.addProperty(date, formatter.format(call.getData()));
    			indCall.addProperty(contact, indC.getURI()); //VER
    		}
    		
    		smsList = GlobalVariables.findSMSByContact(c);
    		
    		if(smsList.size() != 0)
    		{	
    			indThread = m_model.createIndividual(NS+"Thread"+i, Thread);
    			indThread.addProperty(contact, indC.getURI());
    			
    			for(k = 0; k<smsList.size(); k++)
        		{
        			msg = smsList.get(k);
            		
        			indSMS = m_model.createIndividual(NS+msg, Sms);
            		
        			indSMS.addProperty(date, formatter.format(msg.getData()));
        			
        			if(msg.getBody() != null)
        				indSMS.addProperty(text, msg.getBody());
        			
        			indThread.addProperty(thread, indSMS.getURI());
        		}
    		}
    	}
    	
    	//m_model.write(System.out, "RDF/XML-ABBREV");
    	
    	return m_model;
    }
    
    public static OntModel getOntology(Model tdb)
    {
    	OntModel m_model = readOntologyFromFile(Environment.getExternalStorageDirectory() +"/project.owl", tdb);
        
        contact = m_model.getObjectProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#contact" );
        
        thread = m_model.getObjectProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#thread" );
        
        appName = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#appName" );
        
        callNumber = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#callNumber" );
        
        callType = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#callType" );
        
        date = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#date" );
        
        email = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#email" );
        
        endDate = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#endDate" );
        
        id = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#id" );
        
        name = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#name" );
        
        number = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#number" );
        
        packageName = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#packageName" );
        
        text = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#text" );
        
        title = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#title" );
        
        versionCode = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#versionCode" );
        
        versionName = m_model.getDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#versionName" );
        
        App = m_model.getOntClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#App" );
        
        Call = m_model.getOntClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Call" );
        
        Contact = m_model.getOntClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Contact" );
        
        Event = m_model.getOntClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Event" );
        
        Mail = m_model.getOntClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Mail" );
        
        Sms = m_model.getOntClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Sms" );
        
        Thread = m_model.getOntClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Thread" );
        
        return m_model;
    }
    
    private static OntModel readOntologyFromFile(String file, Model tdb)
    {
        // create an empty model
        //Model model = ModelFactory.createDefaultModel();
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM, tdb);
        
        InputStream in = FileManager.get().open( file );
        if (in == null) {
            throw new IllegalArgumentException( "File: " + file + " not found");
        }
        
        // read the RDF/XML file
        model.read(in, null);
        
        // write it to standard out
        //m_model.write(System.out);
        return model;
    }
    
    private void loadOntologyPopulationFromTDB()
    {
        Dataset dataSet = TDBFactory.createDataset(Environment.getExternalStorageDirectory() + "/tdb");
        
        GlobalVariables.model = dataSet.getDefaultModel();
        
        /*PrintStream p = null;
		try {
			p = new PrintStream(Environment.getExternalStorageDirectory() + "/ontologia1.rdf");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        GlobalVariables.model.write(p);*/
        
        //dataSet.close();
    }
    
}
