package com.ontology;

/* CVS $Id: $ */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.List;

import android.os.Environment;

import com.hp.hpl.jena.ontology.*;
import com.hp.hpl.jena.query.Dataset;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.tdb.TDBFactory;
import com.workspace.Data.Chamada;
import com.workspace.Data.Contato;
import com.workspace.Data.GlobalVariables;
import com.workspace.Data.Mensagem;
import com.workspace.sparql.Queries;
 
/**
 * Vocabulary definitions from file:/Applications/Protege_3.4.8/schemagen-temp.owl 
 * @author Auto-generated by schemagen on 02 Dec 2012 16:00 
 */
public class OntyBackup {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.owl-ontologies.com/Ontology1353891856.owl#";
    public static final String URI = "http://www.owl-ontologies.com/Ontology1353891856.owl";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    public static final ObjectProperty contact = m_model.createObjectProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#contact" );
    
    public static final ObjectProperty thread = m_model.createObjectProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#thread" );
    
    public static final DatatypeProperty appName = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#appName" );
    
    public static final DatatypeProperty appType = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#appType" );
    
    public static final DatatypeProperty callNumber = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#callNumber" );
    
    public static final DatatypeProperty callType = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#callType" );
    
    public static final DatatypeProperty date = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#date" );
    
    public static final DatatypeProperty email = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#email" );
    
    public static final DatatypeProperty endDate = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#endDate" );
    
    public static final DatatypeProperty id = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#id" );
    
    public static final DatatypeProperty name = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#name" );
    
    public static final DatatypeProperty number = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#number" );
    
    public static final DatatypeProperty packageName = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#packageName" );
    
    public static final DatatypeProperty text = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#text" );
    
    public static final DatatypeProperty title = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#title" );
    
    public static final DatatypeProperty versionCode = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#versionCode" );
    
    public static final DatatypeProperty versionName = m_model.createDatatypeProperty( "http://www.owl-ontologies.com/Ontology1353891856.owl#versionName" );
    
    public static final OntClass App = m_model.createClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#App" );
    
    public static final OntClass Call = m_model.createClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Call" );
    
    public static final OntClass Contact = m_model.createClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Contact" );
    
    public static final OntClass Event = m_model.createClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Event" );
    
    public static final OntClass Mail = m_model.createClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Mail" );
    
    public static final OntClass Sms = m_model.createClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Sms" );
    
    public static final OntClass Thread = m_model.createClass( "http://www.owl-ontologies.com/Ontology1353891856.owl#Thread" );
    
    
    public static void createLabels()
    {
    	App.addLabel(m_model.createLiteral("app"));
    	App.addLabel(m_model.createLiteral("apps"));
    	App.addLabel(m_model.createLiteral("application"));
    	App.addLabel(m_model.createLiteral("applications"));
    	
    	Call.addLabel(m_model.createLiteral("call"));
    	Call.addLabel(m_model.createLiteral("calls"));
    	
    	Contact.addLabel(m_model.createLiteral("contact"));
    	Contact.addLabel(m_model.createLiteral("contacts"));
    	
    	Event.addLabel(m_model.createLiteral("event"));
    	Event.addLabel(m_model.createLiteral("events"));
    	Event.addLabel(m_model.createLiteral("calendar event"));
    	Event.addLabel(m_model.createLiteral("calendar events"));
    	
    	Thread.addLabel(m_model.createLiteral("sms"));
    	Thread.addLabel(m_model.createLiteral("sms's"));
    	Thread.addLabel(m_model.createLiteral("message"));
    	Thread.addLabel(m_model.createLiteral("messages"));
    	Thread.addLabel(m_model.createLiteral("message thread"));
    	Thread.addLabel(m_model.createLiteral("message threads"));
    	
    	appName.addLabel(m_model.createLiteral("app name"));
    	appName.addLabel(m_model.createLiteral("application name"));
    	
    	packageName.addLabel(m_model.createLiteral("package"));
    	
    	versionCode.addLabel(m_model.createLiteral("version code"));
    	
    	versionName.addLabel(m_model.createLiteral("version name"));
    	
    	callNumber.addLabel(m_model.createLiteral("call number"));
    	
    	callType.addLabel(m_model.createLiteral("lost"));
    	callType.addLabel(m_model.createLiteral("incoming"));
    	callType.addLabel(m_model.createLiteral("missed"));
    	callType.addLabel(m_model.createLiteral("voice mail"));
    	callType.addLabel(m_model.createLiteral("rejected"));
    	
    	date.addLabel(m_model.createLiteral("today"));
    	date.addLabel(m_model.createLiteral("yesterday"));
    	date.addLabel(m_model.createLiteral("tomorrow"));
    	date.addLabel(m_model.createLiteral("next day"));
    	
    	endDate.addLabel(m_model.createLiteral("today"));
    	endDate.addLabel(m_model.createLiteral("yesterday"));
    	endDate.addLabel(m_model.createLiteral("tomorrow"));
    	endDate.addLabel(m_model.createLiteral("next day"));
    	
    	email.addLabel(m_model.createLiteral("email"));
    	email.addLabel(m_model.createLiteral("email address"));
    	
    	name.addLabel(m_model.createLiteral("name"));
    	name.addLabel(m_model.createLiteral("names"));
    	name.addLabel(m_model.createLiteral("contact name"));
    	name.addLabel(m_model.createLiteral("contact names"));
    	
    	number.addLabel(m_model.createLiteral("number"));
    	number.addLabel(m_model.createLiteral("numbers"));
    	number.addLabel(m_model.createLiteral("phone number"));
    	number.addLabel(m_model.createLiteral("phone numbers"));
    	
    	title.addLabel(m_model.createLiteral("title"));
    	title.addLabel(m_model.createLiteral("event title"));
    	
    	
    }
    
    public static void createIndividuals()
    {
    	
    	int i, j, k;
    	
    	Format formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    	
    	Individual indApp;
    	
    	com.workspace.Data.Application app;
    	
    	for(i = 0; i<GlobalVariables.listaApplications.size(); i++)
    	{
    		app = GlobalVariables.listaApplications.get(i);
    		
    		indApp = m_model.createIndividual(NS+app, App);
    		
    		indApp.addProperty(appName, app.getAppname());
    		indApp.addProperty(packageName, app.getPname());
    		indApp.addProperty(versionCode, Integer.toString(app.getVersionCode()));
    		indApp.addProperty(versionName, app.getVersionName());
    	}
    	
    	Individual indEvt;
    	
    	com.workspace.Data.Event evt;
    	
    	for(i = 0; i<GlobalVariables.listaEventos.size(); i++)
    	{
    		evt = GlobalVariables.listaEventos.get(i);
    		
    		indEvt = m_model.createIndividual(NS+evt, Event);
    		
    		indEvt.addProperty(title, evt.getName());
    		indEvt.addProperty(date, formatter.format(evt.getStartDate()));
    		
    		if(evt.getEndDate() != null)
    			indEvt.addProperty(endDate, formatter.format(evt.getEndDate()));
    	}
    	
    	Individual indC, indCall, indSMS, indThread;
    	
    	Contato c;
    	Chamada call;
    	Mensagem msg;
    	
    	List<Chamada> callList;
    	List<Mensagem> smsList;
    	
    	for(i = 0; i<GlobalVariables.listaContatos.size(); i++)
    	{
    		c = GlobalVariables.listaContatos.get(i);
    		
    		indC = m_model.createIndividual(NS+c, Contact);
    		
    		indC.addProperty(id, c.getID());
    		indC.addProperty(name, c.getNome());
    		if(c.getEmail()!= null)
    			indC.addProperty(email, c.getEmail());

    		for(j = 0; j<c.getTelefones().size(); j++)
    			indC.addProperty(number, c.getTelefones().get(j).getTelefone());
    		
    		callList = GlobalVariables.findCallsByContact(c);
    		
    		for(k = 0; k<callList.size(); k++)
    		{
    			call = callList.get(k);
    			indCall = m_model.createIndividual(NS+call, Call);
        		
    			indCall.addProperty(callNumber, call.getTelefone());
    			indCall.addProperty(callType, Integer.toString(call.getType()));
    			indCall.addProperty(date, formatter.format(call.getData()));
    			indCall.addProperty(contact, indC.getURI()); //VER
    		}
    		
    		smsList = GlobalVariables.findSMSByContact(c);
    		
    		if(smsList.size() != 0)
    		{	
    			indThread = m_model.createIndividual(NS+"Thread"+i, Thread);
    			indThread.addProperty(contact, indC.getURI());
    			
    			for(k = 0; k<smsList.size(); k++)
        		{
        			msg = smsList.get(k);
            		
        			indSMS = m_model.createIndividual(NS+msg, Sms);
            		
        			indSMS.addProperty(date, formatter.format(msg.getData()));
        			indSMS.addProperty(text, msg.getBody());
        			
        			indThread.addProperty(thread, indSMS.getURI());
        		}
    		}
    	}
    	
    	String diretoria = "/tdboid_db"; 
    	File storeDir = new File(Environment.getExternalStorageDirectory() + diretoria);

    	Dataset dataset = TDBFactory.createDataset(storeDir.getAbsolutePath()); 
    	final Model modelTDB = dataset.getDefaultModel();
    	//final Model modelTDB = dataset.getNamedModel(URI);
    	
    	PrintStream p = null;
		try {
			p = new PrintStream(Environment.getExternalStorageDirectory() + "/ontologia.rdf");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	m_model.write(p);
    	
    	//new Queries(modelTDB);
    	dataset.close();
    }
    
}
